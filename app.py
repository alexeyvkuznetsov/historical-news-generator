# app.py
import streamlit as st
import datetime
import sys
import os

# --- –ë–õ–û–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –í–ï–†–°–ò–ô (–î–û–ë–ê–í–ò–¢–¨ –í –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï) ---
st.write("--- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ä–µ–¥—ã ---")
try:
    st.write(f"–í–µ—Ä—Å–∏—è Python: {sys.version}")
    st.write(f"–ü—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π (sys.path): {sys.path}")
    st.write(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    st.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", os.listdir('.'))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ modules
    if 'modules' in os.listdir('.'):
        st.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ 'modules':", os.listdir('modules'))
    else:
        st.warning("–ü–∞–ø–∫–∞ 'modules' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º importlib.metadata –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
    import importlib.metadata
    libs_to_check = [
        "streamlit", "pandas", "openai", "pydantic",
        "langchain", "langchain_core", "langchain_openai", "langchain_community",
        "sentence-transformers", "faiss-cpu"
    ]
    versions = {}
    for lib in libs_to_check:
        try:
            versions[lib] = importlib.metadata.version(lib)
        except importlib.metadata.PackageNotFoundError:
            versions[lib] = "–ù–ï –ù–ê–ô–î–ï–ù–ê!"
    st.write("–í–µ—Ä—Å–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:")
    st.json(versions)

    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä—è–º–æ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
    st.write("–ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Output Parsers...")
    from langchain_core.output_parsers import PydanticOutputParser
    st.write("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω PydanticOutputParser")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Ç–æ—Ä–æ–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –ø–∞–¥–∞–µ—Ç –ª–∏ –æ–Ω
    try:
        from langchain_core.output_parsers import OutputFixingParser
        st.write("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω OutputFixingParser")
    except ImportError as ie_fix:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ OutputFixingParser: {ie_fix}")

except Exception as diag_error:
    st.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_error}")
st.write("--- –ö–æ–Ω–µ—Ü –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---")
# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ---


# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å generate_news –ü–û–°–õ–ï –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
try:
    from modules.generator import generate_news
    from modules.models import NewsReport
    st.success("–ò–º–ø–æ—Ä—Ç modules.generator –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.") # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–º–ø–æ—Ä—Ç–∞
except ImportError as app_import_error:
    st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ 'modules.generator': {app_import_error}")
    # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –Ω–µ –≥—Ä—É–∑–∏—Ç—Å—è
    st.stop()
except Exception as app_other_error:
     st.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ 'modules.generator': {app_other_error}")
     st.stop()


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫–™", layout="wide")
st.title("üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –í–µ—Å—Ç–Ω–∏–∫–™ üì∞")
st.caption("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Å–µ–≤–¥–æ-–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –±–∞–∑–µ LLM")

# --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
# ... (–∫–æ–¥ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, —Å—Ç–∏–ª—è, –∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥. –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª) ...
col1, col2 = st.columns([1, 2])

with col1:
    default_date = datetime.date(1789, 7, 14)
    selected_date = st.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤—ã–ø—É—Å–∫–∞ –≥–∞–∑–µ—Ç—ã:",
        value=default_date,
        min_value=datetime.date(1000, 1, 1),
        max_value=datetime.date.today()
    )
    selected_date_str = selected_date.strftime("%d %B %Y")

    era_options = ["XVIII", "XIX", "XVII", "XX"]
    selected_era = st.selectbox("–°—Ç–∏–ª—å –∫–∞–∫–æ–≥–æ –≤–µ–∫–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", era_options, index=0)
    num_articles = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Å–≤–æ–¥–∫–µ:", min_value=1, max_value=5, value=3)

    generate_button = st.button("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –í–µ—Å—Ç–Ω–∏–∫–™!")


# --- –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ ---
with col2:
    st.subheader(f"–í—ã–ø—É—Å–∫—ä –æ—Ç—ä {selected_date_str} ({selected_era} –≤—£–∫—ä)")

    if generate_button:
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏–º–ø–æ—Ä—Ç generate_news —É—Å–ø–µ—à–Ω—ã–º —Ä–∞–Ω–µ–µ
        if 'generate_news' in globals():
            with st.spinner(f"‚è≥ –†–µ–¥–∞–∫—Ü—ñ—è '{'–•—Ä–æ–Ω–æ–≥—Ä–∞—Ñ—ä'.upper()}' –≥–æ—Ç–æ–≤–∏—Ç—ä —Å–≤—£–∂—ñ–π –Ω–æ–º–µ—Ä—ä..."):
                news_report: NewsReport = generate_news(
                    target_date=selected_date_str,
                    era_style=selected_era,
                    num_articles=num_articles
                )

                if news_report and news_report.articles:
                    st.success("üì∞ –°–≤—£–∂—ñ–π –Ω–æ–º–µ—Ä—ä –≥–æ—Ç–æ–≤—ä!")
                    for i, article in enumerate(news_report.articles):
                        st.markdown(f"---")
                        st.markdown(f"### {i+1}. {article.headline}")
                        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è) ...
                        st.markdown(f"**–†—É–±—Ä–∏–∫–∞:** {article.rubric}")
                        st.markdown(f"*{article.date_location}*")
                        st.write(article.body)
                        st.caption(f"–†–µ–ø–æ—Ä—Ç–∞–∂—ä –≤–µ–ª—ä: {article.reporter}")
                # –£–±—Ä–∞–ª–∏ else, —Ç.–∫. —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ generate_news
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å —Å–æ–±—ã—Ç–∏–π
                elif 'last_error' not in globals() or globals()['last_error'] is None:
                     st.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö).")

        else:
             st.error("–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º.")

    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.")


# --- –ü–æ–¥–≤–∞–ª ---
st.markdown("---")
st.caption("–°–æ–∑–¥–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM –∏ Streamlit.")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—à–∏–±–∫–∏ (—Ö–æ—Ç—è –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–µ –∏–Ω–∞—á–µ)
last_error = None